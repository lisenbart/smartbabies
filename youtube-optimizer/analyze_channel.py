#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä YouTube –∫–∞–Ω–∞–ª—É SmartBabies
–ê–Ω–∞–ª—ñ–∑—É—î –ø–æ—Ç–æ—á–Ω—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Ç–∞ –¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
"""

import os
import json
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
API_KEY = os.getenv('YOUTUBE_API_KEY')
CHANNEL_HANDLE = os.getenv('CHANNEL_ID', '@SmartBabies')

def get_channel_id(youtube, handle):
    """–û—Ç—Ä–∏–º—É—î Channel ID –∑ handle (@SmartBabies)"""
    try:
        request = youtube.search().list(
            part='snippet',
            q=handle,
            type='channel',
            maxResults=1
        )
        response = request.execute()
        
        if response['items']:
            return response['items'][0]['snippet']['channelId']
        return None
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–∞–Ω–∞–ª—É: {e}')
        return None

def analyze_channel(youtube, channel_id):
    """–ê–Ω–∞–ª—ñ–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª"""
    try:
        request = youtube.channels().list(
            part='snippet,statistics,contentDetails',
            id=channel_id
        )
        response = request.execute()
        
        if not response['items']:
            print('–ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
            return None
            
        channel = response['items'][0]
        stats = channel['statistics']
        snippet = channel['snippet']
        
        return {
            'title': snippet['title'],
            'description': snippet['description'],
            'subscribers': int(stats.get('subscriberCount', 0)),
            'total_views': int(stats.get('viewCount', 0)),
            'video_count': int(stats.get('videoCount', 0)),
            'custom_url': snippet.get('customUrl', ''),
            'published_at': snippet['publishedAt'],
            'keywords': snippet.get('keywords', ''),
            'country': snippet.get('country', ''),
            'playlist_id': channel['contentDetails']['relatedPlaylists']['uploads']
        }
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—É: {e}')
        return None

def get_recent_videos(youtube, playlist_id, max_results=10):
    """–û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ –∑ –∫–∞–Ω–∞–ª—É"""
    try:
        videos = []
        next_page_token = None
        
        while len(videos) < max_results:
            request = youtube.playlistItems().list(
                part='snippet,contentDetails',
                playlistId=playlist_id,
                maxResults=min(50, max_results - len(videos)),
                pageToken=next_page_token
            )
            response = request.execute()
            
            for item in response['items']:
                video_id = item['contentDetails']['videoId']
                video_data = get_video_details(youtube, video_id)
                if video_data:
                    videos.append(video_data)
            
            next_page_token = response.get('nextPageToken')
            if not next_page_token:
                break
                
        return videos[:max_results]
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: {e}')
        return []

def get_video_details(youtube, video_id):
    """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥–µ–æ"""
    try:
        request = youtube.videos().list(
            part='snippet,statistics,contentDetails',
            id=video_id
        )
        response = request.execute()
        
        if not response['items']:
            return None
            
        video = response['items'][0]
        snippet = video['snippet']
        stats = video['statistics']
        
        return {
            'id': video_id,
            'title': snippet['title'],
            'description': snippet['description'],
            'tags': snippet.get('tags', []),
            'published_at': snippet['publishedAt'],
            'views': int(stats.get('viewCount', 0)),
            'likes': int(stats.get('likeCount', 0)),
            'comments': int(stats.get('commentCount', 0)),
            'duration': video['contentDetails']['duration'],
            'category_id': snippet.get('categoryId', ''),
            'thumbnails': snippet.get('thumbnails', {}),
            'has_custom_thumbnail': 'high' in snippet.get('thumbnails', {})
        }
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ {video_id}: {e}')
        return None

def analyze_video_seo(video):
    """–ê–Ω–∞–ª—ñ–∑—É—î SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –≤—ñ–¥–µ–æ"""
    issues = []
    recommendations = []
    
    title = video['title']
    description = video['description']
    tags = video.get('tags', [])
    
    # –ê–Ω–∞–ª—ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—É
    if len(title) < 30:
        issues.append('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º—ñ–Ω—ñ–º—É–º 30 —Å–∏–º–≤–æ–ª—ñ–≤)')
    elif len(title) > 60:
        issues.append('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 60 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è)')
    
    if 'SmartBabies' not in title and 'ScoopyCap' not in title:
        recommendations.append('–î–æ–¥–∞–π—Ç–µ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—É')
    
    # –ê–Ω–∞–ª—ñ–∑ –æ–ø–∏—Å—É
    desc_length = len(description)
    if desc_length < 200:
        issues.append(f'–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π ({desc_length} —Å–∏–º–≤–æ–ª—ñ–≤, –º—ñ–Ω—ñ–º—É–º 200)')
        recommendations.append('–†–æ–∑—à–∏—Ä—Ç–µ –æ–ø–∏—Å –¥–æ –º—ñ–Ω—ñ–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤')
    elif desc_length < 1000:
        recommendations.append('–Ü–¥–µ–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –¥–ª—è SEO –º–∞—î 1000+ —Å–∏–º–≤–æ–ª—ñ–≤')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Å–∏–ª–∞–Ω—å
    if 'http' not in description:
        recommendations.append('–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à —Å–∞–π—Ç/—Å–æ—Ü–º–µ—Ä–µ–∂—ñ –≤ –æ–ø–∏—Å')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–≥—ñ–≤
    if len(tags) < 10:
        issues.append(f'–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ —Ç–µ–≥—ñ–≤ ({len(tags)}, —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è 10-15)')
    elif len(tags) > 15:
        issues.append(f'–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–µ–≥—ñ–≤ ({len(tags)}, –º–∞–∫—Å–∏–º—É–º 15)')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º–∫–æ–¥—ñ–≤
    if '# ' not in description and '0:00' not in description:
        recommendations.append('–î–æ–¥–∞–π—Ç–µ —Ç–∞–π–º–∫–æ–¥–∏ –¥–æ –æ–ø–∏—Å—É –¥–ª—è –∫—Ä–∞—â–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó')
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ—à—Ç–µ–≥—ñ–≤
    hashtags = [word for word in description.split() if word.startswith('#')]
    if len(hashtags) < 3:
        recommendations.append('–î–æ–¥–∞–π—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (3-5 —à—Ç—É–∫) –≤ –æ–ø–∏—Å –≤—ñ–¥–µ–æ')
    
    return {
        'issues': issues,
        'recommendations': recommendations,
        'seo_score': max(0, 100 - (len(issues) * 15 + len(recommendations) * 5))
    }

def print_analysis_report(channel_data, videos):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É"""
    print("\n" + "="*70)
    print("üìä –ê–ù–ê–õ–Ü–ó –ö–ê–ù–ê–õ–£ SMARTBABIES")
    print("="*70)
    
    if not channel_data:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–∞–Ω–∞–ª—É")
        return
    
    print(f"\nüì∫ –ö–∞–Ω–∞–ª: {channel_data['title']}")
    print(f"üë• –ü—ñ–¥–ø–∏—Å–Ω–∏–∫–∏: {channel_data['subscribers']:,}")
    print(f"üëÄ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {channel_data['total_views']:,}")
    print(f"üé¨ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: {channel_data['video_count']}")
    
    if channel_data['description']:
        desc_len = len(channel_data['description'])
        print(f"\nüìù –û–ø–∏—Å –∫–∞–Ω–∞–ª—É: {desc_len} —Å–∏–º–≤–æ–ª—ñ–≤")
        if desc_len < 200:
            print("‚ö†Ô∏è  –û–ø–∏—Å –∫–∞–Ω–∞–ª—É –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è 200+ —Å–∏–º–≤–æ–ª—ñ–≤)")
    
    print("\n" + "="*70)
    print("üé• –ê–ù–ê–õ–Ü–ó –í–Ü–î–ï–û")
    print("="*70)
    
    total_seo_score = 0
    
    for i, video in enumerate(videos, 1):
        print(f"\n--- –í—ñ–¥–µ–æ {i}: {video['title'][:60]}... ---")
        print(f"–ü–µ—Ä–µ–≥–ª—è–¥–∏: {video['views']:,} | –õ–∞–π–∫–∏: {video['likes']:,}")
        
        seo_analysis = analyze_video_seo(video)
        total_seo_score += seo_analysis['seo_score']
        
        print(f"üìà SEO Score: {seo_analysis['seo_score']}/100")
        
        if seo_analysis['issues']:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∏:")
            for issue in seo_analysis['issues']:
                print(f"  ‚Ä¢ {issue}")
        
        if seo_analysis['recommendations']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            for rec in seo_analysis['recommendations']:
                print(f"  ‚Ä¢ {rec}")
        
        print(f"\n–¢–µ–≥–∏ ({len(video.get('tags', []))}): {', '.join(video.get('tags', [])[:5])}")
    
    avg_seo = total_seo_score / len(videos) if videos else 0
    print("\n" + "="*70)
    print(f"üìä –°–ï–†–ï–î–ù–Ü–ô SEO SCORE: {avg_seo:.1f}/100")
    print("="*70)

def main():
    if not API_KEY:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: YOUTUBE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        print("üìù –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –≤–∞—à API –∫–ª—é—á")
        return
    
    youtube = build('youtube', 'v3', developerKey=API_KEY)
    
    print("üîç –®—É–∫–∞—é –∫–∞–Ω–∞–ª SmartBabies...")
    channel_id = get_channel_id(youtube, CHANNEL_HANDLE)
    
    if not channel_id:
        print(f"‚ùå –ö–∞–Ω–∞–ª {CHANNEL_HANDLE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ö–∞–Ω–∞–ª –∑–Ω–∞–π–¥–µ–Ω–æ! ID: {channel_id}")
    print("üìä –ê–Ω–∞–ª—ñ–∑—É—é –∫–∞–Ω–∞–ª...")
    
    channel_data = analyze_channel(youtube, channel_id)
    
    if not channel_data:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–∞–Ω–∞–ª—É")
        return
    
    print("üé• –ê–Ω–∞–ª—ñ–∑—É—é –æ—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ...")
    videos = get_recent_videos(youtube, channel_data['playlist_id'], max_results=10)
    
    print_analysis_report(channel_data, videos)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    report = {
        'channel': channel_data,
        'videos': videos,
        'analysis': [analyze_video_seo(v) for v in videos]
    }
    
    with open('analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ analysis_report.json")

if __name__ == '__main__':
    main()

