#!/usr/bin/env python3
"""
–ú–∞—Å–æ–≤–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ –Ω–∞ YouTube
–ü—ñ–¥–≤–∏—â—É—î SEO, CTR —Ç–∞ retention –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
"""

import json
import os
import sys
import time
from datetime import datetime
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv
from auth_setup import get_youtube_service
from optimize_videos import get_channel_id, get_all_videos, detect_content_type, generate_optimization_report
from generate_description import generate_optimized_description, generate_optimized_tags
from get_playlists import get_playlists_for_channel

load_dotenv()

def optimize_title(title, content_type):
    """–û–ø—Ç–∏–º—ñ–∑—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ CTR –ë–ï–ó –æ–±—Ä—ñ–∑–∞–Ω–Ω—è —Å–ª—ñ–≤"""
    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä—ñ–∑–∞–Ω—ñ –Ω–∞–∑–≤–∏
    optimized = title.strip()
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–º—ñ –æ–±—Ä—ñ–∑–∞–Ω—ñ —Å–ª–æ–≤–∞ –ü–ï–†–ï–î –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º "..."
    if 'presents: ...' in optimized:
        optimized = optimized.replace('presents: ...', 'presents: Adventure')
    if '–Ω–∞ –•–µ...' in optimized:
        optimized = optimized.replace('–Ω–∞ –•–µ...', '–Ω–∞ –•–µ–ª–æ–≤—ñ–Ω')
    if optimized.endswith('–•–µ...'):
        optimized = optimized.replace('–•–µ...', '–•–µ–ª–æ–≤—ñ–Ω')
    if '–•–µ...' in optimized:
        optimized = optimized.replace('–•–µ...', '–•–µ–ª–æ–≤—ñ–Ω')
    if optimized.endswith('Alpa'):
        optimized = optimized.replace('Alpa', 'Alphabet')
    if optimized.endswith('Ghos'):
        optimized = optimized + 'ts'
    if optimized.endswith('Watch'):
        optimized = optimized + ' Now'
    if optimized.endswith('presents:'):
        optimized = optimized + ' Adventure'
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞
    if optimized.endswith('–•–µ'):
        optimized = optimized.replace('–•–µ', '–•–µ–ª–æ–≤—ñ–Ω')
    if optimized.endswith('–ø—Ä–∏–≤–∏–¥—ñ–≤?'):
        optimized = optimized + ' –•–µ–ª–æ–≤—ñ–Ω'
    if optimized.endswith('–Ω–∞ –•–µ'):
        optimized = optimized.replace('–Ω–∞ –•–µ', '–Ω–∞ –•–µ–ª–æ–≤—ñ–Ω')
    if optimized.endswith('–Ω–∞'):
        optimized = optimized + ' –•–µ–ª–æ–≤—ñ–Ω'
    
    # –í–∏–¥–∞–ª—è—î–º–æ "..." –≤ –∫—ñ–Ω—Ü—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è
    if optimized.endswith('...'):
        optimized = optimized[:-3].strip()
    
    # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ —è–∫—â–æ –Ω–µ–º–∞—î
    emoji_map = {
        'learning': 'üî§',
        'numbers': 'üî¢',
        'colors': 'üé®',
        'songs': 'üéµ',
        'adventure': 'üõ∏'
    }
    emoji = emoji_map.get(content_type, 'üéØ')
    
    if not any(ord(c) > 127 for c in optimized[:2]):  # –Ø–∫—â–æ –Ω–µ–º–∞—î –µ–º–æ–¥–∑—ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        optimized = f"{emoji} {optimized}"
    
    # –î–æ–¥–∞—î–º–æ –±—Ä–µ–Ω–¥ —è–∫—â–æ –Ω–µ–º–∞—î
    if 'SmartBabies' not in optimized and 'ScoopyCap' not in optimized:
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø—ñ—Å–ª—è –µ–º–æ–¥–∑—ñ –∞–±–æ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        if ' | ' in optimized:
            parts = optimized.split(' | ', 1)
            optimized = f"{parts[0]} | SmartBabies {parts[1]}"
        else:
            optimized = f"{optimized} | SmartBabies"
    
    # –†–æ–∑—É–º–Ω–µ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –ë–ï–ó –æ–±—Ä—ñ–∑–∞–Ω–Ω—è —Å–ª—ñ–≤
    if len(optimized) > 100:  # YouTube –¥–æ–∑–≤–æ–ª—è—î –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–ª–æ–≤–∞, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å
        words = optimized.split()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Å–ª–æ–≤–∞ –∑ –∫—ñ–Ω—Ü—è, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–∂–ª–∏–≤—ñ
        important_words = ['SmartBabies', 'ScoopyCap', 'Learn', 'Kids', 'Preschool', 'Alphabet', 'Ghosts', '–•–µ–ª–æ–≤—ñ–Ω']
        while len(' '.join(words)) > 100 and len(words) > 3:
            # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Å–ª–æ–≤–∞
            last_word = words[-1]
            if not any(important in last_word for important in important_words):
                words.pop()
            else:
                # –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ –≤–∞–∂–ª–∏–≤–µ, –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î
                if len(words) > 4:
                    words.pop(-2)
                else:
                    break
        
        optimized = ' '.join(words)
    
    return optimized

def create_enhanced_description(title, content_type, current_desc, video_id, playlists_cache=None, youtube_api=None):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –æ–ø–∏—Å –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ retention —Ç–∞ CTR"""
    
    # –ë–∞–∑–æ–≤–∏–π –æ–ø–∏—Å (–±–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç - —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
    social_links = {
        'youtube': 'https://www.youtube.com/@SmartBabies',
        'facebook': 'https://www.facebook.com/Smart-Babies-108947580525633/'
        # 'website' –ø—Ä–∏–±—Ä–∞–Ω–æ - —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    }
    
    description = generate_optimized_description(
        title,
        content_type,
        social_links=social_links
    )
    
    # –î–æ–¥–∞—î–º–æ call-to-action –Ω–∞ –ø–æ—á–∞—Ç–∫—É (–ø—ñ–¥–≤–∏—â—É—î retention)
    cta_text = f"""üéØ Press LIKE if your child enjoyed this video! 
üí¨ Comment below what your little one learned today!

"""
    
    # –í—Å—Ç–∞–≤–ª—è—î–º–æ CTA –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∞–±–∑–∞—Ü—É
    lines = description.split('\n')
    if len(lines) > 3:
        description = '\n'.join(lines[:3]) + '\n' + cta_text + '\n'.join(lines[3:])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∏
    if playlists_cache is None and youtube_api:
        try:
            playlists_cache = get_playlists_for_channel(youtube_api)
        except:
            playlists_cache = {}
    
    # –î–æ–¥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∏
    description += "\n\nüìö MORE SMARTBABIES CONTENT:\n"
    
    if playlists_cache:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if content_type == 'songs' and 'songs' in playlists_cache:
            songs_playlist = playlists_cache['songs']
            description += f"üéµ Songs & Music: {songs_playlist['url']}\n"
        elif 'songs' in playlists_cache:
            description += f"üéµ Songs & Music: {playlists_cache['songs']['url']}\n"
        else:
            description += "üéµ Songs & Music: https://www.youtube.com/@SmartBabies/playlists\n"
        
        if content_type == 'learning' and 'learning' in playlists_cache:
            learning_playlist = playlists_cache['learning']
            description += f"üî§ Learning ABC: {learning_playlist['url']}\n"
        elif 'learning' in playlists_cache:
            description += f"üî§ Learning ABC: {playlists_cache['learning']['url']}\n"
        else:
            description += "üî§ Learning ABC: https://www.youtube.com/@SmartBabies/playlists\n"
        
        if content_type == 'colors' and 'colors' in playlists_cache:
            colors_playlist = playlists_cache['colors']
            description += f"üé® Colors & Shapes: {colors_playlist['url']}\n"
        elif 'colors' in playlists_cache:
            description += f"üé® Colors & Shapes: {playlists_cache['colors']['url']}\n"
        elif 'songs' in playlists_cache:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ–∫—Ä–µ–º–æ–≥–æ –¥–ª—è colors, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π
            description += f"üé® Colors & Shapes: {playlists_cache['songs']['url']}\n"
        else:
            description += "üé® Colors & Shapes: https://www.youtube.com/@SmartBabies/playlists\n"
    else:
        # Fallback —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏
        description += "üéµ Songs & Music: https://www.youtube.com/@SmartBabies/playlists\n"
        description += "üî§ Learning ABC: https://www.youtube.com/@SmartBabies/playlists\n"
        description += "üé® Colors & Shapes: https://www.youtube.com/@SmartBabies/playlists\n"
    
    # –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤ –¥–ª—è discovery
    relevant_hashtags = [
        '#KidsEducation',
        '#PreschoolLearning',
        '#SmartBabies',
        '#ScoopyCap',
        '#ToddlerEducation',
        '#KidsLearning',
        '#EducationalVideos',
        '#PreschoolContent',
        '#SafeKidsContent',
        '#KidsContent',
        '#LearningForKids',
        '#PreschoolVideos'
    ]
    
    # –î–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ—à—Ç–µ–≥–∏
    if 'ukrainian' in current_desc.lower() or '—É–∫—Ä–∞—ó–Ω' in current_desc.lower():
        relevant_hashtags.extend(['#–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–î—ñ—Ç–∏', '#–û—Å–≤—ñ—Ç–∞–î—ñ—Ç–µ–π'])
    
    if 'polish' in current_desc.lower() or 'polski' in current_desc.lower():
        relevant_hashtags.extend(['#EdukacjaDzieci', '#PolskieDzieci'])
    
    description += "\n" + " ".join(relevant_hashtags[:10])
    
    return description

def update_video_metadata(youtube, video_id, optimized_title, optimized_description, optimized_tags):
    """–û–Ω–æ–≤–ª—é—î –º–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ YouTube API"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–µ–æ
        video_response = youtube.videos().list(
            part='snippet',
            id=video_id
        ).execute()
        
        if not video_response['items']:
            print(f"  ‚ö†Ô∏è  –í—ñ–¥–µ–æ {video_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        video = video_response['items'][0]
        snippet = video['snippet']
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        snippet['title'] = optimized_title
        snippet['description'] = optimized_description
        snippet['tags'] = optimized_tags[:15]  # YouTube –æ–±–º–µ–∂—É—î –¥–æ 15
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–µ–æ
        update_response = youtube.videos().update(
            part='snippet',
            body={
                'id': video_id,
                'snippet': snippet
            }
        ).execute()
        
        return True
        
    except HttpError as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ {video_id}: {e}")
        if e.resp.status == 403:
            print("  ‚ö†Ô∏è  –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É OAuth —Ç–æ–∫–µ–Ω—É")
        return False

def batch_update_videos(youtube, videos_data, preview_mode=True, limit=None):
    """
    –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
    
    Args:
        youtube: YouTube API —Å–µ—Ä–≤—ñ—Å
        videos_data: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –≤—ñ–¥–µ–æ
        preview_mode: —è–∫—â–æ True, —Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑—É—î —â–æ –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ
        limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    """
    if limit:
        videos_data = videos_data[:limit]
    
    total = len(videos_data)
    updated = 0
    failed = 0
    
    print(f"\n{'='*70}")
    print(f"üöÄ {'PREVIEW' if preview_mode else '–û–ù–û–í–õ–ï–ù–ù–Ø'} –ú–ï–¢–ê–î–ê–ù–ò–• –í–Ü–î–ï–û")
    print(f"{'='*70}")
    print(f"üìä –í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ: {total}")
    
    if preview_mode:
        print("\n‚ö†Ô∏è  –†–ï–ñ–ò–ú –ü–†–ï–í'–Æ: –ù—ñ—á–æ–≥–æ –Ω–µ –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –≤ YouTube")
        print("–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∑ --apply\n")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API –∫–ª—é—á–∞)
    print("üìö –û—Ç—Ä–∏–º—É—é —Ä–µ–∞–ª—å–Ω—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∏ –∫–∞–Ω–∞–ª—É...")
    playlists_cache = {}
    try:
        from dotenv import load_dotenv
        import os
        load_dotenv()
        api_key = os.getenv('YOUTUBE_API_KEY')
        if api_key:
            youtube_read = build('youtube', 'v3', developerKey=api_key)
            playlists_cache = get_playlists_for_channel(youtube_read)
            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(playlists_cache)} –ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∏: {e}")
        print("   –ë—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n")
    
    changes_log = []
    
    for i, video_info in enumerate(videos_data, 1):
        video_id = video_info['video_id']
        current_title = video_info['current']['title']
        current_desc_len = video_info['current']['description_length']
        current_tags_count = video_info['current']['tags_count']
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó
        content_type = video_info['content_type']
        optimized_title = optimize_title(current_title, content_type)
        optimized_description = create_enhanced_description(
            optimized_title,
            content_type,
            video_info.get('current_description', ''),
            video_id,
            playlists_cache=playlists_cache
        )
        optimized_tags = video_info['optimized']['tags']
        
        print(f"\n[{i}/{total}] {current_title[:50]}...")
        print(f"  ID: {video_id}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–º—ñ–Ω–∏
        title_changed = current_title != optimized_title
        desc_changed = len(optimized_description) != current_desc_len
        tags_changed = len(optimized_tags) != current_tags_count
        
        if title_changed:
            print(f"  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:")
            print(f"     –ë—É–ª–æ: {current_title[:60]} ({len(current_title)} —Å–∏–º–≤–æ–ª—ñ–≤)")
            print(f"     –°—Ç–∞–Ω–µ: {optimized_title} ({len(optimized_title)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        
        if desc_changed:
            print(f"  üìÑ –û–ø–∏—Å:")
            print(f"     –ë—É–ª–æ: {current_desc_len} —Å–∏–º–≤–æ–ª—ñ–≤")
            print(f"     –°—Ç–∞–Ω–µ: {len(optimized_description)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        if tags_changed:
            print(f"  üè∑Ô∏è  –¢–µ–≥–∏:")
            print(f"     –ë—É–ª–æ: {current_tags_count} —Ç–µ–≥—ñ–≤")
            print(f"     –°—Ç–∞–Ω–µ: {len(optimized_tags)} —Ç–µ–≥—ñ–≤")
        
        if not title_changed and not desc_changed and not tags_changed:
            print(f"  ‚úì –í–∂–µ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ")
            continue
        
        if not preview_mode:
            print(f"  üîÑ –û–Ω–æ–≤–ª—é—é...")
            success = update_video_metadata(
                youtube,
                video_id,
                optimized_title,
                optimized_description,
                optimized_tags
            )
            
            if success:
                updated += 1
                print(f"  ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
                time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ rate limits
            else:
                failed += 1
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        
        changes_log.append({
            'video_id': video_id,
            'title': current_title,
            'optimized_title': optimized_title,
            'title_changed': title_changed,
            'description_length_changed': desc_changed,
            'tags_count_changed': tags_changed
        })
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É
    log_file = f"update_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(log_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'preview_mode': preview_mode,
            'total': total,
            'updated': updated if not preview_mode else 0,
            'failed': failed if not preview_mode else 0,
            'changes': changes_log
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\n{'='*70}")
    if preview_mode:
        print(f"üìã –ü—Ä–µ–≤'—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {log_file}")
        print(f"\nüí° –î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –∑–∞–ø—É—Å—Ç—ñ—Ç—å:")
        print(f"   python3 update_videos.py --apply")
    else:
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"   –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {updated}")
        print(f"   –ü–æ–º–∏–ª–æ–∫: {failed}")
        print(f"   –õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {log_file}")
    print(f"{'='*70}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ú–∞—Å–æ–≤–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ YouTube'
    )
    parser.add_argument(
        '--apply',
        action='store_true',
        help='–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ (–±–µ–∑ —Ü—å–æ–≥–æ –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –ø—Ä–µ–≤\'—é)'
    )
    parser.add_argument(
        '--limit',
        type=int,
        help='–û–±–º–µ–∂–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)'
    )
    parser.add_argument(
        '--priority',
        action='store_true',
        help='–û–Ω–æ–≤–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–µ–æ –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (3+ –ø—Ä–æ–±–ª–µ–º)'
    )
    
    args = parser.parse_args()
    
    print("üîç –ê–Ω–∞–ª—ñ–∑—É—é –∫–∞–Ω–∞–ª —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É—é –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    api_key = os.getenv('YOUTUBE_API_KEY')
    if not api_key:
        print("‚ùå YOUTUBE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    youtube_read = build('youtube', 'v3', developerKey=api_key)
    channel_handle = os.getenv('CHANNEL_ID', '@SmartBabies')
    
    channel_id = get_channel_id(youtube_read, channel_handle)
    if not channel_id:
        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_handle} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ
    print(f"üì• –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –≤—ñ–¥–µ–æ...")
    videos = get_all_videos(youtube_read, channel_id, max_results=200)
    
    if not videos:
        print("‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(videos)} –≤—ñ–¥–µ–æ")
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ–π–Ω–∏–π –∑–≤—ñ—Ç
    print(f"üîß –ê–Ω–∞–ª—ñ–∑—É—é —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É—é –º–µ—Ç–∞–¥–∞–Ω—ñ...")
    report = generate_optimization_report(videos)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    for video_info in report['videos']:
        video_id = video_info['video_id']
        video_response = youtube_read.videos().list(
            part='snippet',
            id=video_id
        ).execute()
        if video_response['items']:
            video_info['current_description'] = video_response['items'][0]['snippet']['description']
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if args.priority:
        report['videos'] = [v for v in report['videos'] if v['priority'] >= 3]
        print(f"üìä –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: {len(report['videos'])} –≤—ñ–¥–µ–æ –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ OAuth —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ preview)
    youtube_write = None
    if args.apply:
        print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è...")
        youtube_write = get_youtube_service()
        if not youtube_write:
            print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")
            print("üìù –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: python3 auth_setup.py")
            return
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    batch_update_videos(
        youtube_write or youtube_read,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ write —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
        report['videos'],
        preview_mode=not args.apply,
        limit=args.limit
    )

if __name__ == '__main__':
    main()

