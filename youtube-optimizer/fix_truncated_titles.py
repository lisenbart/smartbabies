#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–±—Ä—ñ–∑–∞–Ω–∏—Ö –Ω–∞–∑–≤ –≤—ñ–¥–µ–æ
–í—ñ–¥–Ω–æ–≤–ª—é—î –ø–æ–≤–Ω—ñ –Ω–∞–∑–≤–∏ –±–µ–∑ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è —Å–ª—ñ–≤
"""

import json
import os
import time
from datetime import datetime
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv
from auth_setup import get_youtube_service

load_dotenv()

def fix_truncated_title(title):
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –æ–±—Ä—ñ–∑–∞–Ω—É –Ω–∞–∑–≤—É –¥–æ –ø–æ–≤–Ω–æ—ó"""
    # –í–∏–¥–∞–ª—è—î–º–æ "..." –≤ –∫—ñ–Ω—Ü—ñ
    if title.endswith('...'):
        title = title[:-3].strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ "..." –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ (—è–∫—â–æ —î)
    if '...' in title:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤–Ω–µ —Å–ª–æ–≤–æ –ø–µ—Ä–µ–¥ "..."
        parts = title.split('...')
        if len(parts) > 1:
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É —ñ –¥–æ–¥–∞—î–º–æ –ª–æ–≥—ñ—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            first_part = parts[0].strip()
            if first_part.endswith('Alpa'):
                return first_part.replace('Alpa', 'Alphabet')
            elif first_part.endswith('Miss Polly Had A Doll'):
                return first_part + 'y'
            elif first_part.endswith('Five Little Ghosts'):
                return first_part + ' üëª'
            elif first_part.endswith('Captain Scoopy Cap presents'):
                return first_part + ' Adventure'
            # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–ª–æ–≤–∞
            elif first_part.endswith('–•–µ'):
                return first_part.replace('–•–µ', '–•–µ–ª–æ–≤—ñ–Ω')
            elif '–•–µ...' in first_part:
                return first_part.replace('–•–µ...', '–•–µ–ª–æ–≤—ñ–Ω')
            elif first_part.endswith('–ø—Ä–∏–≤–∏–¥—ñ–≤?'):
                return first_part + ' –•–µ–ª–æ–≤—ñ–Ω'
            else:
                return first_part
    
    return title

def get_original_title_from_description(description):
    """–ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É –∑ –æ–ø–∏—Å—É"""
    lines = description.split('\n')
    for line in lines[:5]:  # –ü–µ—Ä—à—ñ 5 —Ä—è–¥–∫—ñ–≤
        line = line.strip()
        if line and not line.startswith('http') and not line.startswith('#'):
            # –Ø–∫—â–æ —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤—É (–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –Ω–µ —Ö–µ—à—Ç–µ–≥)
            if len(line) > 10 and not line.startswith('üéØ'):
                return line
    return None

def fix_video_title(youtube, video_id, current_title, description):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –Ω–∞–∑–≤—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ñ–¥–µ–æ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥–µ–æ
        video_response = youtube.videos().list(
            part='snippet',
            id=video_id
        ).execute()
        
        if not video_response['items']:
            print(f"  ‚ö†Ô∏è  –í—ñ–¥–µ–æ {video_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        video = video_response['items'][0]
        snippet = video['snippet']
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É
        fixed_title = fix_truncated_title(current_title)
        
        # –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –≤—Å–µ —â–µ –≤–∏–≥–ª—è–¥–∞—î –æ–±—Ä—ñ–∑–∞–Ω–æ—é, –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ –æ–ø–∏—Å—É
        if '...' in fixed_title or len(fixed_title) < 20:
            original_from_desc = get_original_title_from_description(description)
            if original_from_desc and len(original_from_desc) > len(fixed_title):
                fixed_title = original_from_desc
        
        # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ —Ç–∞ –±—Ä–µ–Ω–¥ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if not any(ord(c) > 127 for c in fixed_title[:2]):
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –µ–º–æ–¥–∑—ñ
            if 'alphabet' in fixed_title.lower() or 'abc' in fixed_title.lower():
                emoji = 'üî§'
            elif 'number' in fixed_title.lower() or 'count' in fixed_title.lower():
                emoji = 'üî¢'
            elif 'color' in fixed_title.lower():
                emoji = 'üé®'
            elif 'song' in fixed_title.lower() or 'music' in fixed_title.lower():
                emoji = 'üéµ'
            elif 'scoopycap' in fixed_title.lower() or 'adventure' in fixed_title.lower():
                emoji = 'üõ∏'
            else:
                emoji = 'üéØ'
            
            fixed_title = f"{emoji} {fixed_title}"
        
        # –î–æ–¥–∞—î–º–æ –±—Ä–µ–Ω–¥ —è–∫—â–æ –Ω–µ–º–∞—î
        if 'SmartBabies' not in fixed_title and 'ScoopyCap' not in fixed_title:
            if ' | ' in fixed_title:
                parts = fixed_title.split(' | ', 1)
                fixed_title = f"{parts[0]} | SmartBabies {parts[1]}"
            else:
                fixed_title = f"{fixed_title} | SmartBabies"
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–∑–≤—É
        snippet['title'] = fixed_title
        
        update_response = youtube.videos().update(
            part='snippet',
            body={
                'id': video_id,
                'snippet': snippet
            }
        ).execute()
        
        return True, fixed_title
        
    except HttpError as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ {video_id}: {e}")
        return False, current_title

def find_truncated_videos(youtube, channel_id, max_results=200):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ñ–¥–µ–æ –∑ –æ–±—Ä—ñ–∑–∞–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ playlist ID –∑ uploads
        request = youtube.channels().list(
            part='contentDetails',
            id=channel_id
        )
        response = request.execute()
        
        if not response['items']:
            return []
        
        playlist_id = response['items'][0]['contentDetails']['relatedPlaylists']['uploads']
        
        videos = []
        next_page_token = None
        
        while len(videos) < max_results:
            request = youtube.playlistItems().list(
                part='snippet,contentDetails',
                playlistId=playlist_id,
                maxResults=min(50, max_results - len(videos)),
                pageToken=next_page_token
            )
            response = request.execute()
            
            for item in response['items']:
                video_id = item['contentDetails']['videoId']
                video_request = youtube.videos().list(
                    part='snippet',
                    id=video_id
                )
                video_response = video_request.execute()
                if video_response['items']:
                    video = video_response['items'][0]
                    title = video['snippet']['title']
                    description = video['snippet']['description']
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–∑–≤–∞ –æ–±—Ä—ñ–∑–∞–Ω–∞
                    if '...' in title or (len(title) < 30 and 'SmartBabies' not in title):
                        videos.append({
                            'video_id': video_id,
                            'title': title,
                            'description': description
                        })
            
            next_page_token = response.get('nextPageToken')
            if not next_page_token or len(videos) >= max_results:
                break
                
        return videos
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return []

def get_channel_id(youtube, handle):
    """–û—Ç—Ä–∏–º—É—î Channel ID –∑ handle"""
    try:
        request = youtube.search().list(
            part='snippet',
            q=handle,
            type='channel',
            maxResults=1
        )
        response = request.execute()
        if response['items']:
            return response['items'][0]['snippet']['channelId']
        return None
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return None

def main():
    print("üîç –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –∑ –æ–±—Ä—ñ–∑–∞–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    api_key = os.getenv('YOUTUBE_API_KEY')
    if not api_key:
        print("‚ùå YOUTUBE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è
    youtube_read = build('youtube', 'v3', developerKey=api_key)
    channel_handle = os.getenv('CHANNEL_ID', '@SmartBabies')
    
    channel_id = get_channel_id(youtube_read, channel_handle)
    if not channel_id:
        print(f"‚ùå –ö–∞–Ω–∞–ª {channel_handle} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–±—Ä—ñ–∑–∞–Ω—ñ –≤—ñ–¥–µ–æ
    truncated_videos = find_truncated_videos(youtube_read, channel_id)
    
    if not truncated_videos:
        print("‚úÖ –í—ñ–¥–µ–æ –∑ –æ–±—Ä—ñ–∑–∞–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ {len(truncated_videos)} –≤—ñ–¥–µ–æ –∑ –æ–±—Ä—ñ–∑–∞–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏:")
    
    for i, video in enumerate(truncated_videos, 1):
        print(f"\n[{i}] {video['title']}")
        print(f"    ID: {video['video_id']}")
        print(f"    URL: https://www.youtube.com/watch?v={video['video_id']}")
    
    # –ü–∏—Ç–∞—î–º–æ —á–∏ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏
    response = input(f"\n‚ùì –í–∏–ø—Ä–∞–≤–∏—Ç–∏ —Ü—ñ {len(truncated_videos)} –≤—ñ–¥–µ–æ? (y/n): ")
    if response.lower() != 'y':
        print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ OAuth —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    print("\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è...")
    youtube_write = get_youtube_service()
    if not youtube_write:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è")
        print("üìù –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: python3 auth_setup.py")
        return
    
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–µ–æ
    print(f"\nüîß –í–∏–ø—Ä–∞–≤–ª—è—é –Ω–∞–∑–≤–∏...")
    fixed_count = 0
    failed_count = 0
    changes_log = []
    
    for i, video in enumerate(truncated_videos, 1):
        video_id = video['video_id']
        current_title = video['title']
        description = video['description']
        
        print(f"\n[{i}/{len(truncated_videos)}] –í–∏–ø—Ä–∞–≤–ª—è—é: {current_title[:50]}...")
        
        success, new_title = fix_video_title(
            youtube_write, 
            video_id, 
            current_title, 
            description
        )
        
        if success:
            fixed_count += 1
            print(f"  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {new_title}")
            changes_log.append({
                'video_id': video_id,
                'old_title': current_title,
                'new_title': new_title,
                'url': f"https://www.youtube.com/watch?v={video_id}"
            })
        else:
            failed_count += 1
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è")
        
        time.sleep(1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ rate limits
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ª–æ–≥—É
    log_file = f"fix_titles_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(log_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'total_found': len(truncated_videos),
            'fixed': fixed_count,
            'failed': failed_count,
            'changes': changes_log
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\n{'='*70}")
    print(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"   –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"   –ü–æ–º–∏–ª–æ–∫: {failed_count}")
    print(f"   –õ–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {log_file}")
    print(f"{'='*70}")

if __name__ == '__main__':
    main()
