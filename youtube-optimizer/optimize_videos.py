#!/usr/bin/env python3
"""
–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å–æ–≤–æ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ
–ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó –æ–ø–∏—Å—ñ–≤/—Ç–µ–≥—ñ–≤
"""

import json
import os
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv
from generate_description import generate_optimized_description, generate_optimized_tags

load_dotenv()

API_KEY = os.getenv('YOUTUBE_API_KEY')
CHANNEL_HANDLE = os.getenv('CHANNEL_ID', '@SmartBabies')

def get_channel_id(youtube, handle):
    """–û—Ç—Ä–∏–º—É—î Channel ID –∑ handle"""
    try:
        request = youtube.search().list(
            part='snippet',
            q=handle,
            type='channel',
            maxResults=1
        )
        response = request.execute()
        if response['items']:
            return response['items'][0]['snippet']['channelId']
        return None
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return None

def get_all_videos(youtube, channel_id, max_results=50):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –≤—ñ–¥–µ–æ –∫–∞–Ω–∞–ª—É"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ playlist ID –∑ uploads
        request = youtube.channels().list(
            part='contentDetails',
            id=channel_id
        )
        response = request.execute()
        
        if not response['items']:
            return []
        
        playlist_id = response['items'][0]['contentDetails']['relatedPlaylists']['uploads']
        
        videos = []
        next_page_token = None
        
        while len(videos) < max_results:
            request = youtube.playlistItems().list(
                part='snippet,contentDetails',
                playlistId=playlist_id,
                maxResults=min(50, max_results - len(videos)),
                pageToken=next_page_token
            )
            response = request.execute()
            
            for item in response['items']:
                video_id = item['contentDetails']['videoId']
                video_request = youtube.videos().list(
                    part='snippet,statistics',
                    id=video_id
                )
                video_response = video_request.execute()
                if video_response['items']:
                    videos.append(video_response['items'][0])
            
            next_page_token = response.get('nextPageToken')
            if not next_page_token or len(videos) >= max_results:
                break
                
        return videos[:max_results]
    except HttpError as e:
        print(f'–ü–æ–º–∏–ª–∫–∞: {e}')
        return []

def detect_content_type(title, description, tags):
    """–í–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–∑–≤–∏ —Ç–∞ –æ–ø–∏—Å—É"""
    text = (title + " " + description + " " + " ".join(tags)).lower()
    
    if any(word in text for word in ['number', 'count', 'math', '—Ü–∏—Ñ—Ä']):
        return 'numbers'
    elif any(word in text for word in ['color', 'colour', '–∫–æ–ª—å–æ—Ä']):
        return 'colors'
    elif any(word in text for word in ['song', 'music', '–ø—ñ—Å–Ω—è', '–º—É–∑–∏–∫']):
        return 'songs'
    elif any(word in text for word in ['adventure', 'scoopycap', 'space', '–ø—Ä–∏–≥–æ–¥–∞']):
        return 'adventure'
    else:
        return 'learning'

def generate_optimization_report(videos):
    """–ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ –ø–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    report = {
        'total_videos': len(videos),
        'videos': []
    }
    
    for video in videos:
        snippet = video['snippet']
        stats = video.get('statistics', {})
        
        title = snippet['title']
        description = snippet['description']
        tags = snippet.get('tags', [])
        video_id = video['id']
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_type = detect_content_type(title, description, tags)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        current_description = description
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        issues = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É
        if len(title) < 30:
            issues.append({'type': 'title_short', 'message': f'–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π ({len(title)} —Å–∏–º–≤–æ–ª—ñ–≤)'})
        if 'SmartBabies' not in title and 'ScoopyCap' not in title:
            issues.append({'type': 'brand_missing', 'message': '–í—ñ–¥—Å—É—Ç–Ω—è –Ω–∞–∑–≤–∞ –±—Ä–µ–Ω–¥—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É'})
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–∏—Å—É
        desc_length = len(description)
        if desc_length < 200:
            issues.append({'type': 'description_short', 'message': f'–û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π ({desc_length} —Å–∏–º–≤–æ–ª—ñ–≤)'})
        if 'http' not in description:
            issues.append({'type': 'links_missing', 'message': '–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –æ–ø–∏—Å—ñ'})
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–≥—ñ–≤
        if len(tags) < 10:
            issues.append({'type': 'tags_few', 'message': f'–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ —Ç–µ–≥—ñ–≤ ({len(tags)})'})
        elif len(tags) > 15:
            issues.append({'type': 'tags_many', 'message': f'–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Ç–µ–≥—ñ–≤ ({len(tags)})'})
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó
        optimized_description = generate_optimized_description(
            title,
            content_type,
            social_links={
                'youtube': 'https://www.youtube.com/@SmartBabies',
                'facebook': 'https://www.facebook.com/Smart-Babies-108947580525633/'
            }
        )
        
        optimized_tags = generate_optimized_tags(content_type, tags[:5])
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        improved_titles = []
        if 'SmartBabies' not in title:
            improved_titles.append(f"üî§ {title} | SmartBabies - Learn with ScoopyCap")
        if len(title) < 40:
            improved_titles.append(f"{title} - Educational Video for Preschoolers | SmartBabies")
        
        video_report = {
            'video_id': video_id,
            'current': {
                'title': title,
                'description_length': desc_length,
                'tags_count': len(tags),
                'tags': tags,
                'views': int(stats.get('viewCount', 0)),
                'likes': int(stats.get('likeCount', 0))
            },
            'current_description': current_description,  # –î–æ–¥–∞—î–º–æ –¥–ª—è update_videos.py
            'content_type': content_type,
            'issues': issues,
            'optimized': {
                'description': optimized_description,
                'description_length': len(optimized_description),
                'tags': optimized_tags,
                'tags_count': len(optimized_tags),
                'improved_titles': improved_titles
            },
            'priority': len(issues)  # –ë—ñ–ª—å—à–µ –ø—Ä–æ–±–ª–µ–º = –≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        }
        
        report['videos'].append(video_report)
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    report['videos'].sort(key=lambda x: (-x['priority'], -x['current']['views']), reverse=True)
    
    return report

def print_optimization_report(report):
    """–í–∏–≤–æ–¥–∏—Ç—å –∑–≤—ñ—Ç –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
    print("\n" + "="*70)
    print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ó –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á")
    print("="*70)
    print(f"\nüìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤—ñ–¥–µ–æ: {report['total_videos']}")
    
    high_priority = [v for v in report['videos'] if v['priority'] >= 3]
    if high_priority:
        print(f"\n‚ö†Ô∏è  –í—ñ–¥–µ–æ –∑ –≤–∏—Å–æ–∫–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {len(high_priority)}")
    
    print("\n" + "="*70)
    
    for i, video in enumerate(report['videos'][:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø 10
        print(f"\n{'='*70}")
        print(f"–í–Ü–î–ï–û #{i}: {video['current']['title'][:60]}")
        print(f"{'='*70}")
        print(f"üì∫ ID: {video['video_id']}")
        print(f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥–∏: {video['current']['views']:,}")
        print(f"üëç –õ–∞–π–∫–∏: {video['current']['likes']:,}")
        print(f"üìù –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {video['content_type']}")
        print(f"‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {'üî¥ –í–∏—Å–æ–∫–∏–π' if video['priority'] >= 3 else 'üü° –°–µ—Ä–µ–¥–Ω—ñ–π' if video['priority'] >= 1 else 'üü¢ –ù–∏–∑—å–∫–∏–π'}")
        
        if video['issues']:
            print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ò ({len(video['issues'])}):")
            for issue in video['issues']:
                print(f"  ‚Ä¢ {issue['message']}")
        
        if video['optimized']['improved_titles']:
            print(f"\nüí° –ü–û–ö–†–ê–©–ï–ù–Ü –ó–ê–ì–û–õ–û–í–ö–ò:")
            for title in video['optimized']['improved_titles']:
                print(f"  ‚Ä¢ {title} ({len(title)} —Å–∏–º–≤–æ–ª—ñ–≤)")
        
        print(f"\nüìà –ü–û–ö–†–ê–©–ï–ù–ù–Ø:")
        print(f"  ‚Ä¢ –û–ø–∏—Å: {video['current']['description_length']} ‚Üí {video['optimized']['description_length']} —Å–∏–º–≤–æ–ª—ñ–≤ (+{video['optimized']['description_length'] - video['current']['description_length']})")
        print(f"  ‚Ä¢ –¢–µ–≥–∏: {video['current']['tags_count']} ‚Üí {video['optimized']['tags_count']}")
        
        print(f"\nüè∑Ô∏è  –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–Ü –¢–ï–ì–ò:")
        print(f"  {', '.join(video['optimized']['tags'][:10])}")

def main():
    if not API_KEY:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: YOUTUBE_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    youtube = build('youtube', 'v3', developerKey=API_KEY)
    
    print("üîç –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –∫–∞–Ω–∞–ª—É...")
    channel_id = get_channel_id(youtube, CHANNEL_HANDLE)
    
    if not channel_id:
        print(f"‚ùå –ö–∞–Ω–∞–ª {CHANNEL_HANDLE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ö–∞–Ω–∞–ª –∑–Ω–∞–π–¥–µ–Ω–æ!")
    print("üé• –ê–Ω–∞–ª—ñ–∑—É—é –≤—ñ–¥–µ–æ...")
    
    videos = get_all_videos(youtube, channel_id, max_results=50)
    
    if not videos:
        print("‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(videos)} –≤—ñ–¥–µ–æ")
    print("üîß –ì–µ–Ω–µ—Ä—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...")
    
    report = generate_optimization_report(videos)
    
    print_optimization_report(report)
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    with open('optimization_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –æ–ø–∏—Å–∞–º–∏
    print("\nüíæ –ó–±–µ—Ä—ñ–≥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
    
    for video in report['videos'][:20]:  # –ü–µ—Ä—à—ñ 20 –≤—ñ–¥–µ–æ
        filename = f"optimized_{video['video_id']}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–í–Ü–î–ï–û: {video['current']['title']}\n")
            f.write(f"ID: {video['video_id']}\n")
            f.write("="*70 + "\n\n")
            f.write("–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –û–ü–ò–°:\n")
            f.write("="*70 + "\n\n")
            f.write(video['optimized']['description'])
            f.write("\n\n" + "="*70 + "\n")
            f.write("–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–Ü –¢–ï–ì–ò:\n")
            f.write("="*70 + "\n")
            f.write(", ".join(video['optimized']['tags']))
            f.write("\n")
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {min(20, len(report['videos']))} —Ñ–∞–π–ª—ñ–≤ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –æ–ø–∏—Å–∞–º–∏")
    print("‚úÖ –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ optimization_report.json")

if __name__ == '__main__':
    main()

