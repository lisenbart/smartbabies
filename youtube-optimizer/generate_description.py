#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ —Ç–∞ —Ç–µ–≥—ñ–≤ –¥–ª—è –≤—ñ–¥–µ–æ SmartBabies
"""

import argparse
from datetime import datetime

# –®–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É
CONTENT_TEMPLATES = {
    'learning': {
        'title_prefix': 'üî§',
        'keywords': ['alphabet', 'letters', 'learning', 'education', 'preschool'],
        'hashtags': ['#KidsEducation', '#PreschoolLearning', '#SmartBabies', '#AlphabetForKids']
    },
    'numbers': {
        'title_prefix': 'üî¢',
        'keywords': ['numbers', 'counting', 'math', 'preschool', 'toddler'],
        'hashtags': ['#LearnNumbers', '#CountingForKids', '#SmartBabies', '#PreschoolMath']
    },
    'colors': {
        'title_prefix': 'üé®',
        'keywords': ['colors', 'learning', 'preschool', 'toddler', 'education'],
        'hashtags': ['#LearnColors', '#KidsEducation', '#SmartBabies', '#Preschool']
    },
    'songs': {
        'title_prefix': 'üéµ',
        'keywords': ['kids songs', 'children music', 'preschool', 'educational songs'],
        'hashtags': ['#KidsSongs', '#ChildrenMusic', '#SmartBabies', '#PreschoolSongs']
    },
    'adventure': {
        'title_prefix': 'üõ∏',
        'keywords': ['ScoopyCap', 'adventure', 'space', 'preschool', 'learning'],
        'hashtags': ['#ScoopyCap', '#SmartBabies', '#KidsAdventure', '#Preschool']
    }
}

def generate_optimized_tags(content_type, additional_tags=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ç–µ–≥—ñ–≤"""
    base_tags = CONTENT_TEMPLATES.get(content_type, CONTENT_TEMPLATES['learning'])['keywords']
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è SmartBabies
    smartbabies_tags = [
        'SmartBabies',
        'ScoopyCap',
        'preschool education',
        'toddler learning',
        'educational videos for kids',
        'kids content',
        'preschool activities',
        'early learning',
        'children education',
        'safe kids content'
    ]
    
    # –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
    multilingual_tags = [
        'ukrainian kids content',
        'polish kids videos',
        'bilingual education'
    ]
    
    all_tags = base_tags + smartbabies_tags[:10] + multilingual_tags[:3]
    
    if additional_tags:
        all_tags.extend(additional_tags)
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–æ 15
    unique_tags = list(dict.fromkeys(all_tags))[:15]
    
    return unique_tags

def generate_optimized_description(title, content_type, video_length_minutes=None, timestamps=None, 
                                   social_links=None, language='en'):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –æ–ø–∏—Å—É –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ CTR —Ç–∞ retention"""
    template = CONTENT_TEMPLATES.get(content_type, CONTENT_TEMPLATES['learning'])
    prefix = template['title_prefix']
    
    # –ü–æ—á–∞—Ç–æ–∫ –∑ –∫–ª—é—á–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É (–ø–µ—Ä—à—ñ 2 —Ä—è–¥–∫–∏ - –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –¥–ª—è SEO)
    # –î–æ–¥–∞—î–º–æ CTA –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è engagement
    description = f"""{prefix} {title}

üéØ Learn with SmartBabies! Educational content designed for preschoolers and toddlers.
üëç LIKE this video if your child loves learning with ScoopyCap!

"""
    
    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ—Ä–∏—Å—Ç—å
    description += "üìö WHAT YOUR CHILD WILL LEARN:\n"
    learning_points_detailed = {
        'learning': '‚Ä¢ Letter recognition and phonics\n‚Ä¢ Building vocabulary\n‚Ä¢ Early reading skills\n‚Ä¢ Pronunciation practice\n',
        'numbers': '‚Ä¢ Number recognition 1-10\n‚Ä¢ Counting skills\n‚Ä¢ Basic math concepts\n‚Ä¢ Pattern recognition\n',
        'colors': '‚Ä¢ Color names and identification\n‚Ä¢ Color matching\n‚Ä¢ Creative expression\n‚Ä¢ Visual learning\n',
        'songs': '‚Ä¢ Rhythm and melody\n‚Ä¢ Language development\n‚Ä¢ Memory enhancement\n‚Ä¢ Motor skills through dance\n',
        'adventure': '‚Ä¢ Critical thinking\n‚Ä¢ Problem-solving\n‚Ä¢ Social-emotional skills\n‚Ä¢ Exploration and curiosity\n'
    }
    description += learning_points_detailed.get(content_type, '‚Ä¢ Fun educational content\n‚Ä¢ Safe viewing experience\n‚Ä¢ Age-appropriate learning\n')
    description += "\nüéì Perfect for ages 2-5 years old!\n\n"
    
    # –¢–∞–π–º–∫–æ–¥–∏ (—è–∫—â–æ —î)
    if timestamps:
        description += "‚è±Ô∏è CHAPTERS:\n"
        for time, label in timestamps:
            description += f"{time} - {label}\n"
        description += "\n"
    elif video_length_minutes and video_length_minutes > 2:
        description += "üí° TIP: Use the chapters in this video to jump to your favorite parts!\n\n"
    
    # –©–æ –¥—ñ—Ç–∏ –≤–∏–≤—á–∞—Ç—å
    description += "‚ú® WHAT CHILDREN WILL LEARN:\n"
    learning_points = {
        'learning': '‚Ä¢ Letter recognition and sounds\n‚Ä¢ Basic vocabulary\n‚Ä¢ Pronunciation skills\n',
        'numbers': '‚Ä¢ Number recognition\n‚Ä¢ Counting skills\n‚Ä¢ Basic math concepts\n',
        'colors': '‚Ä¢ Color names and recognition\n‚Ä¢ Matching colors\n‚Ä¢ Creative expression\n',
        'songs': '‚Ä¢ Rhythm and melody\n‚Ä¢ Language development\n‚Ä¢ Memory skills\n',
        'adventure': '‚Ä¢ Problem-solving\n‚Ä¢ Curiosity and exploration\n‚Ä¢ Social-emotional skills\n'
    }
    description += learning_points.get(content_type, '‚Ä¢ Fun and educational content\n‚Ä¢ Safe viewing experience\n')
    
    description += "\n"
    
    # –ü—Ä–æ SmartBabies
    description += "üõ∏ ABOUT SMARTBABIES:\n"
    description += """SmartBabies¬Æ creates safe, engaging educational content for preschoolers. 
Our hero ScoopyCap guides children through fun learning adventures!

üëâ SUBSCRIBE NOW: https://www.youtube.com/@SmartBabies?sub_confirmation=1
üîî Click the bell for notifications!

"""
    
    # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ
    if social_links:
        description += "üîó FOLLOW US:\n"
        if social_links.get('youtube'):
            description += f"YouTube: {social_links['youtube']}\n"
        if social_links.get('facebook'):
            description += f"Facebook: {social_links.get('facebook')}\n"
        description += "\n"
    
    # –•–µ—à—Ç–µ–≥–∏ (–≤ –∫—ñ–Ω—Ü—ñ –æ–ø–∏—Å—É)
    hashtags = template['hashtags']
    description += " ".join(hashtags)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
    additional_hashtags = [
        '#ToddlerEducation',
        '#KidsLearning',
        '#EducationalVideos',
        '#PreschoolContent',
        '#SafeKidsContent'
    ]
    description += " " + " ".join(additional_hashtags[:3])
    
    return description

def generate_title_suggestions(content_topic, content_type):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤"""
    template = CONTENT_TEMPLATES.get(content_type, CONTENT_TEMPLATES['learning'])
    prefix = template['title_prefix']
    
    suggestions = [
        f"{prefix} {content_topic} | SmartBabies - Learn with ScoopyCap",
        f"{prefix} Learn {content_topic} | Educational Video for Kids | SmartBabies",
        f"{prefix} {content_topic} for Preschoolers | SmartBabies - Safe Kids Content",
        f"{prefix} {content_topic} | Fun Learning for Toddlers | SmartBabies",
        f"ScoopyCap's {content_topic} Adventure | SmartBabies - Preschool Education"
    ]
    
    return suggestions

def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ –¥–ª—è YouTube')
    parser.add_argument('--topic', required=True, help='–¢–µ–º–∞ –≤—ñ–¥–µ–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "ABC Learning")')
    parser.add_argument('--type', default='learning', 
                       choices=['learning', 'numbers', 'colors', 'songs', 'adventure'],
                       help='–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É')
    parser.add_argument('--length', type=int, help='–î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–µ–æ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö')
    parser.add_argument('--output', default='output_description.txt', help='–§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è')
    
    args = parser.parse_args()
    
    print("\n" + "="*70)
    print("üìù –ì–ï–ù–ï–†–ê–¶–Ü–Ø –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û–ì–û –û–ü–ò–°–£")
    print("="*70)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    print("\nüìå –í–ê–†–Ü–ê–ù–¢–ò –ó–ê–ì–û–õ–û–í–ö–Ü–í:")
    title_suggestions = generate_title_suggestions(args.topic, args.type)
    for i, title in enumerate(title_suggestions, 1):
        print(f"{i}. {title} ({len(title)} —Å–∏–º–≤–æ–ª—ñ–≤)")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—É
    social_links = {
        'youtube': 'https://www.youtube.com/@SmartBabies',
        'facebook': 'https://www.facebook.com/Smart-Babies-108947580525633/'
    }
    
    description = generate_optimized_description(
        args.topic,
        args.type,
        video_length_minutes=args.length,
        social_links=social_links
    )
    
    print(f"\nüìÑ –û–ü–ò–° ({len(description)} —Å–∏–º–≤–æ–ª—ñ–≤):")
    print("-"*70)
    print(description)
    print("-"*70)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–≥—ñ–≤
    tags = generate_optimized_tags(args.type)
    print(f"\nüè∑Ô∏è  –¢–ï–ì–ò ({len(tags)} —Ç–µ–≥—ñ–≤):")
    print(", ".join(tags))
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    with open(args.output, 'w', encoding='utf-8') as f:
        f.write("="*70 + "\n")
        f.write("–û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –û–ü–ò–° –î–õ–Ø YOUTUBE\n")
        f.write(f"–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n")
        f.write("="*70 + "\n\n")
        f.write("–ó–ê–ì–û–õ–û–í–ö–ò:\n")
        for i, title in enumerate(title_suggestions, 1):
            f.write(f"{i}. {title}\n")
        f.write("\n" + "="*70 + "\n")
        f.write("–û–ü–ò–°:\n")
        f.write("="*70 + "\n\n")
        f.write(description)
        f.write("\n\n" + "="*70 + "\n")
        f.write("–¢–ï–ì–ò:\n")
        f.write("="*70 + "\n")
        f.write(", ".join(tags))
        f.write("\n")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {args.output}")

if __name__ == '__main__':
    main()

